import numpy as np
import matplotlib.pyplot as plt

# Constants
e = 1.602e-19  # Electron charge (Coulombs)
m_e = 9.109e-31  # Electron mass (kg)
epsilon_0 = 8.854e-12  # Permittivity of free space (F/m)
c = 3e8  # Speed of light (m/s)
attenuation_air = 0.01  # Attenuation coefficient for air (arbitrary units)

def linac_simulation(acceleration, initial_energy=1e5, num_steps=1000, air_fraction=0.8, material_attenuation=0.05):
    # Initialize particle parameters
    energy = initial_energy  # Start with a given kinetic energy
    velocity = 0
    position = np.array([0.0, 0.0, 0.0])
    direction = np.array([1.0, 0.0, 0.0])  # Initial direction along x-axis
    
    bremsstrahlung_powers = []
    energies = []
    brems_to_total_ratio = []
    total_energy_emitted_brems = 0
    total_energy_emitted_other = 0
    
    for step in range(num_steps):
        # Update acceleration with air and material attenuation
        effective_accel = acceleration * air_fraction * (1 - material_attenuation)
        velocity += effective_accel * (1e-9)  # Update velocity
        
        # Calculate instantaneous bremsstrahlung power
        power_brems = (e**2 * effective_accel**2) / (6 * np.pi * epsilon_0 * c**3)
        bremsstrahlung_powers.append(power_brems)
        
        # Attenuation-adjusted power loss
        power_other = power_brems * 0.1  # Example of photo-matter interaction
        total_energy_emitted_brems += power_brems * (1e-9)
        total_energy_emitted_other += power_other * (1e-9)

        # Update particle energy (gradual loss over time)
        energy -= (power_brems + power_other) * (1e-9)
        energies.append(energy)

        # Calculate bremsstrahlung to total ratio
        total_radiation = total_energy_emitted_brems + total_energy_emitted_other
        ratio = total_energy_emitted_brems / total_radiation if total_radiation > 0 else 0
        brems_to_total_ratio.append(ratio)

        # Update position and direction (random slight direction changes)
        position += direction * velocity * (1e-9)  # Update position
        direction += np.random.normal(0, 0.05, size=3)  # Small random direction change
        direction = direction / np.linalg.norm(direction)  # Normalize direction

    return bremsstrahlung_powers, energies, brems_to_total_ratio

# Parameters
acceleration = 1e16  # LINAC acceleration (m/s^2)
powers_brems, energies, brems_to_total = linac_simulation(acceleration)

# Plot results
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
plt.plot(powers_brems, label="Bremsstrahlung Power")
plt.xlabel("Time Step")
plt.ylabel("Power (W)")
plt.title("Bremsstrahlung Power in LINAC")
plt.legend()

plt.subplot(1, 3, 2)
plt.plot(energies, label="Remaining Particle Energy", color='orange')
plt.xlabel("Time Step")
plt.ylabel("Energy (J)")
plt.title("Particle Energy Over Time")
plt.legend()

plt.subplot(1, 3, 3)
plt.plot(brems_to_total, label="Brems/Total Radiation Ratio", color='green')
plt.xlabel("Time Step")
plt.ylabel("Ratio")
plt.title("Bremsstrahlung to Total Radiation Ratio")
plt.legend()

plt.tight_layout()
plt.show()
